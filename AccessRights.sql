==============================================================================================================================================

14.2	Access Rights
Rights Held By a User

Create this macro, execute the macro, and pass the username as argument to this macro. It will retrieve all sorts of access rights held by this user, either through role or direct.
You can also use SQLs define in the macro to obtain direct rights or rights through roles.

----------------------------------------------------------------------
REPLACE MACRO DBC.ALLUSERRIGHTS (USERNAME CHAR(30))
AS (
/* LIST RIGHTS HELD BY A USER AS DIRECT GRANTS OR THROUGH ROLES */
LOCKING ROW FOR ACCESS
SELECT
USERNAME (VARCHAR(30))
,ACCESSTYPE (VARCHAR(30))
,ROLENAME (VARCHAR(30))
,DATABASENAME (VARCHAR(30))
,TABLENAME (VARCHAR(30))
,COLUMNNAME (VARCHAR(30))
,ACCESSRIGHT
,CASE
WHEN ACCESSRIGHT='AE' THEN 'ALTER EXTERNALPROCEDURE'
WHEN ACCESSRIGHT='AF' THEN 'ALTER FUNCTION'
WHEN ACCESSRIGHT='AP' THEN 'ALTER PROCEDURE'
WHEN ACCESSRIGHT='AS' THEN 'ABORT SESSION'
WHEN ACCESSRIGHT='CA' THEN 'CREATE AUTHORIZATION'
WHEN ACCESSRIGHT='CD' THEN 'CREATE DATABASE'
WHEN ACCESSRIGHT='CE' THEN 'CREATE EXTERNAL PROCEDURE'
WHEN ACCESSRIGHT='CF' THEN 'CREATE FUNCTION'
WHEN ACCESSRIGHT='CG' THEN 'CREATE TRIGGER'
WHEN ACCESSRIGHT='CM' THEN 'CREATE MACRO'
WHEN ACCESSRIGHT='CO' THEN 'CREATE PROFILE'
WHEN ACCESSRIGHT='CP' THEN 'CHECKPOINT'
WHEN ACCESSRIGHT='CR' THEN 'CREATE ROLE'
WHEN ACCESSRIGHT='CT' THEN 'CREATE TABLE'
WHEN ACCESSRIGHT='CU' THEN 'CREATE USER'
WHEN ACCESSRIGHT='CV' THEN 'CREATE VIEW'
WHEN ACCESSRIGHT='D' THEN 'DELETE'
WHEN ACCESSRIGHT='DA' THEN 'DROP AUTHORIZATION'
WHEN ACCESSRIGHT='DD' THEN 'DROP DATABASE'
WHEN ACCESSRIGHT='DF' THEN 'DROP FUNCTION'
WHEN ACCESSRIGHT='DG' THEN 'DROP TRIGGER'
WHEN ACCESSRIGHT='DM' THEN 'DROP MACRO'
WHEN ACCESSRIGHT='DO' THEN 'DROP PROFILE'
WHEN ACCESSRIGHT='DP' THEN 'DUMP'
WHEN ACCESSRIGHT='DR' THEN 'DROP ROLE'
WHEN ACCESSRIGHT='DT' THEN 'DROP TABLE'
WHEN ACCESSRIGHT='DU' THEN 'DROP USER'
WHEN ACCESSRIGHT='DV' THEN 'DROP VIEW'
WHEN ACCESSRIGHT='E' THEN 'EXECUTE'
WHEN ACCESSRIGHT='EF' THEN 'EXECUTE FUNCTION'
WHEN ACCESSRIGHT='GC' THEN 'CREATE GLOP'
WHEN ACCESSRIGHT='GD' THEN 'DROP GLOP'
WHEN ACCESSRIGHT='GM' THEN 'GLOP MEMBER'
WHEN ACCESSRIGHT='I' THEN 'INSERT'
WHEN ACCESSRIGHT='IX' THEN 'INDEX'
WHEN ACCESSRIGHT='MR' THEN 'MONITOR RESOURCE'
WHEN ACCESSRIGHT='MS' THEN 'MONITOR SESSION'
WHEN ACCESSRIGHT='NT' THEN 'NONTEMPORAL'
WHEN ACCESSRIGHT='OD' THEN 'OVERRIDE DELETE POLICY'
WHEN ACCESSRIGHT='OI' THEN 'OVERRIDE INSERT POLICY'
WHEN ACCESSRIGHT='OP' THEN 'CREATE OWNER PROCEDURE'
WHEN ACCESSRIGHT='OS' THEN 'OVERRIDE SELECT POLICY'
WHEN ACCESSRIGHT='OU' THEN 'OVERRIDE UPDATE POLICY'
WHEN ACCESSRIGHT='PC' THEN 'CREATE PROCEDURE'
WHEN ACCESSRIGHT='PD' THEN 'DROP PROCEDURE'
WHEN ACCESSRIGHT='PE' THEN 'EXECUTE PROCEDURE'
WHEN ACCESSRIGHT='RO' THEN 'REPLICATION OVERRIDE'
WHEN ACCESSRIGHT='R' THEN 'RETRIEVE/SELECT'
WHEN ACCESSRIGHT='RF' THEN 'REFERENCE'
WHEN ACCESSRIGHT='RS' THEN 'RESTORE'
WHEN ACCESSRIGHT='SA' THEN 'SECURITY CONSTRAINT ASSIGNMENT'
WHEN ACCESSRIGHT='SD' THEN 'SECURITY CONSTRAINT DEFINITION'
WHEN ACCESSRIGHT='ST' THEN 'STATISTICS'
WHEN ACCESSRIGHT='SS' THEN 'SET SESSION RATE'
WHEN ACCESSRIGHT='SR' THEN 'SET RESOURCE RATE'
WHEN ACCESSRIGHT='TH' THEN 'CTCONTROL' 
WHEN ACCESSRIGHT='U' THEN 'UPDATE'
WHEN ACCESSRIGHT='UU' THEN 'UDT USAGE'
WHEN ACCESSRIGHT='UT' THEN 'UDT TYPE'
WHEN ACCESSRIGHT='UM' THEN 'UDT METHOD'
ELSE''
END (VARCHAR(26)) AS ACCESSRIGHTDESC
,GRANTAUTHORITY
,GRANTORNAME (VARCHAR(30))
,ALLNESSFLAG
,CREATORNAME (VARCHAR(30))
,CREATETIMESTAMP
FROM
(
SELECT -- GET DIRECT USER RIGHTS
USERNAME
,'USER' (VARCHAR(30)) AS ACCESSTYPE
,'' (VARCHAR(30)) AS ROLENAME
,DATABASENAME
,TABLENAME
,COLUMNNAME
,ACCESSRIGHT
,GRANTAUTHORITY
,GRANTORNAME
,ALLNESSFLAG
,CREATORNAME
,CREATETIMESTAMP
FROM DBC.ALLRIGHTS
WHERE USERNAME = :USERNAME
AND CREATORNAME NOT = :USERNAME -- EXCLUDE OBJECTS CREATED BY USER
UNION ALL
SELECT -- GET RIGHTS HELD THROUGH A ROLE
GRANTEE AS USERNAME
,'MEMBER' AS UR
,R.ROLENAME
,DATABASENAME
,TABLENAME
,COLUMNNAME
,ACCESSRIGHT
,NULL (CHAR(1)) AS GRANTAUTHORITY
,GRANTORNAME
,NULL (CHAR(1)) AS ALLNESSFLAG
,NULL (CHAR(1)) AS CREATORNAME
,CREATETIMESTAMP
FROM DBC.ALLROLERIGHTS R
JOIN DBC.ROLEMEMBERS M
ON M.ROLENAME = R.ROLENAME
WHERE USERNAME = :USERNAME
UNION ALL
SELECT -- GET RIGHTS HELD THROUGH A SUBROLE
USER AS USERNAME
,M.GRANTEE AS UR
,R.ROLENAME
,DATABASENAME
,TABLENAME
,COLUMNNAME
,ACCESSRIGHT
,NULL (CHAR(1)) AS GRANTAUTHORITY
,GRANTORNAME
,NULL (CHAR(1)) AS ALLNESSFLAG
,NULL (CHAR(1)) AS CREATORNAME
,CREATETIMESTAMP
FROM DBC.ALLROLERIGHTS R
JOIN DBC.ROLEMEMBERS M
ON M.ROLENAME = R.ROLENAME
WHERE M.GRANTEE IN (SELECT ROLENAME FROM DBC.ROLEMEMBERS WHERE
GRANTEE = :USERNAME)
) ALLRIGHTS
-- WHERE DATABASENAME NOT = 'DBC' -- UNCOMMENT TO EXCLUDE DBC OBJECTS
ORDER BY 4,5,6,7;
);

To run this Macro:
EXEC DBC.ALLUSERRIGHTS (‘DBC');

-----------------------------------------------

Rights that could be considered for revocation
----------------------------------------------------
The purpose of the view is to find explicitly-granted rights that could be considered for revocation because the user has the same right via a role.  
I think it's been tested pretty thoroughly, but there are no guarantees so be sure you archive your DBC.AccessRights table before revoking rights.

SELECT DISTINCT
    SR.ROLENAME      AS ROLENAME
   ,UDB.DATABASENAME AS USERNAME
   ,DDB.DATABASENAME AS DATABASENAME
   ,TVM.TVMNAME      AS OBJECTNAME
   ,CASE
      WHEN TVM.TVMID = '00'XB
        THEN 'N/A'
        ELSE TVM.TABLEKIND
    END              AS OBJECTKIND
   ,UR.ACCESSRIGHT   AS ACCESSRIGHT
FROM DBC.ACCESSRIGHTS RR
    ,DBC.ACCESSRIGHTS UR
    ,DBC.ROLEGRANTS   RRG
    ,DBC.ROLEGRANTS   URG
    ,DBC.ROLES        SR
    ,DBC.DBASE        UDB
    ,DBC.DBASE        DDB
    ,DBC.TVM          TVM
WHERE RR.DATABASEID  = UR.DATABASEID
 AND  RR.TVMID       = UR.TVMID
 AND  RR.FIELDID     = UR.FIELDID
 AND  RR.ACCESSRIGHT = UR.ACCESSRIGHT
 AND  RR.USERID      = RRG.ROLEID
 AND  UR.USERID      = UDB.DATABASEID
 AND  UR.USERID      = URG.GRANTEEID
 AND  SR.ROLEID      = URG.ROLEID
 AND  RRG.GRANTEEID  = URG.ROLEID
 AND  UR.DATABASEID  = DDB.DATABASEID
 AND  UR.TVMID       = TVM.TVMID
 AND  URG.GRANTEEKIND = 'U'
 AND  RRG.GRANTEEKIND = 'R'
 AND  UR.WITHGRANT    = 'N'
 AND  UR.ALLNESSFLAG  = 'N'
 AND  RR.WITHGRANT    = 'N'
 AND  RR.ALLNESSFLAG  = 'N'
UNION
SEL DISTINCT
    R.ROLENAME       AS ROLENAME
   ,UDB.DATABASENAME AS USERNAME
   ,DDB.DATABASENAME AS DATABASENAME
   ,TVM.TVMNAME      AS OBJECTNAME
   ,CASE
      WHEN TVM.TVMID = '00'XB
        THEN 'N/A'
        ELSE TVM.TABLEKIND
    END              AS OBJECTKIND
   ,UR.ACCESSRIGHT   AS ACCESSRIGHT
FROM DBC.ACCESSRIGHTS RR
    ,DBC.ACCESSRIGHTS UR
    ,DBC.ROLEGRANTS   RG
    ,DBC.ROLES        R
    ,DBC.DBASE        UDB
    ,DBC.DBASE        DDB
    ,DBC.TVM          TVM
WHERE RR.DATABASEID  = UR.DATABASEID
 AND  RR.TVMID       = UR.TVMID
 AND  RR.FIELDID     = UR.FIELDID
 AND  RR.ACCESSRIGHT = UR.ACCESSRIGHT
 AND  RR.USERID      = RG.ROLEID
 AND  UR.USERID      = UDB.DATABASEID
 AND  UR.USERID      = RG.GRANTEEID
 AND  R.ROLEID       = RG.ROLEID
 AND  UR.DATABASEID  = DDB.DATABASEID
 AND  UR.TVMID       = TVM.TVMID
 AND  RG.GRANTEEKIND = 'U'
 AND  UR.WITHGRANT   = 'N'
 AND  UR.ALLNESSFLAG = 'N'
 AND  RR.WITHGRANT   = 'N'
 AND  RR.ALLNESSFLAG = 'N'
;
-------------------------------------------

Role held by User 
--------------------
SELECT  ROLENAME  
FROM	 DBC.ROLEMEMBERS 
WHERE	 GRANTEE ='DBC'

---------------------------------------------